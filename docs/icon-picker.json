{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-picker",
  "type": "registry:block",
  "title": "Icon Picker",
  "description": "An icon picker component with lucide icons.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "popover",
    "tooltip"
  ],
  "files": [
    {
      "path": "src/components/ui/iconPicker.tsx",
      "content": "\"use client\";\n\nimport { useState, useMemo } from \"react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport React, { lazy, Suspense } from 'react';\nimport { LucideProps } from 'lucide-react';\nimport dynamicIconImports from 'lucide-react/dynamicIconImports';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\n\ninterface IconProps extends Omit<LucideProps, 'ref'> {\n  name: keyof typeof dynamicIconImports;\n}\n\nconst Icon = ({ name, ...props }: IconProps) => {\n  const LucideIcon = lazy(dynamicIconImports[name]);\n\n  return (\n    <Suspense fallback={<div className=\"w-6 h-6 bg-gray-100 dark:bg-gray-800 rounded-md \" />}>\n      <LucideIcon {...props} />\n    </Suspense>\n  );\n}\n\nconst ICON_BUTTONS = Object.keys(dynamicIconImports).map((icon) => ({\n  icon: icon as keyof typeof dynamicIconImports,\n  component: <Icon name={icon as keyof typeof dynamicIconImports} className=\"w-6 h-6\" />\n}));\n\nexport function IconPicker({ \n  onSelect,\n  children,\n  searchable = true,\n  searchPlaceholder = \"Search for an icon...\"\n}: { \n  onSelect: (icon: keyof typeof dynamicIconImports) => void,\n  children?: React.ReactNode,\n  searchable?: boolean,\n  searchPlaceholder?: string\n}) {\n  const [open, setOpen] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [displayCount, setDisplayCount] = useState(32);\n\n  const handleOpenChange = (newOpen: boolean) => {\n    setOpen(newOpen);\n    if (!newOpen) {\n      setDisplayCount(32);\n      setSearch(\"\");\n    }\n  };\n\n  const filteredIcons = useMemo(() => \n    search.trim() === \"\" \n      ? ICON_BUTTONS \n      : ICON_BUTTONS.filter(({ icon }) =>\n          icon.toLowerCase().includes(search.toLowerCase())\n        ),\n    [search]\n  );\n\n  const displayedIcons = useMemo(() => \n    filteredIcons.slice(0, displayCount),\n    [filteredIcons, displayCount]\n  );\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;\n    if (scrollHeight - scrollTop - clientHeight < 20) {\n      setDisplayCount(prev => Math.min(prev + 32, filteredIcons.length));\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={handleOpenChange}>\n      <PopoverTrigger asChild>\n        {children || (\n          <Button variant=\"outline\">\n            Select an icon\n          </Button>\n        )}\n      </PopoverTrigger>\n      <PopoverContent className=\"w-64 p-2\">\n        {searchable && (\n          <Input\n            placeholder={searchPlaceholder}\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n            className=\"mb-2\"\n          />\n        )}\n        <div \n          className=\"grid grid-cols-4 gap-2 max-h-60 overflow-auto\"\n          onScroll={handleScroll}\n        >\n          {displayedIcons.map(({ icon, component }) => (\n            <TooltipProvider key={icon}>\n              <Tooltip>\n                <TooltipTrigger\n                  className={cn(\n                    \"p-2 rounded-md border hover:bg-gray-100 dark:hover:bg-gray-800 transition\",\n                    \"flex items-center justify-center\"\n                  )}\n                  onClick={() => {\n                    onSelect(icon as keyof typeof dynamicIconImports);\n                    setOpen(false);\n                    setDisplayCount(32);\n                    setSearch(\"\");\n                  }}>\n                  {component}\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{icon}</p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          ))}\n          {filteredIcons.length === 0 && (\n            <div className=\"text-center text-gray-500 col-span-4\">\n              No icon found\n            </div>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}",
      "type": "registry:component"
    }
  ]
}