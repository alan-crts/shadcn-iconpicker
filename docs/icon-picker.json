{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-picker",
  "type": "registry:block",
  "title": "Icon Picker",
  "description": "An icon picker component with lucide icons.",
  "dependencies": [
    "lucide-react",
    "lucide-react/dynamic"
  ],
  "registryDependencies": [
    "button",
    "input",
    "popover"
  ],
  "files": [
    {
      "path": "src/components/ui/iconPicker.tsx",
      "content": "\"use client\";\n\nimport { useState, useMemo } from \"react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport * as LucideIcons from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { DynamicIcon, IconName } from 'lucide-react/dynamic';\n\nconst toSnakeCase = (str: string): string => {\n  const transformations = [\n    [/Icon$/, ''],                       \n    [/([A-Z]+)([A-Z][a-z])/g, '$1-$2'],   \n    [/([a-z])([A-Z])/g, '$1-$2'],        \n    [/([a-zA-Z])(\\d+)|(\\d+)([a-zA-Z])/g, '$1$3-$2$4'],\n    [/([a-zA-Z])(\\d+)/g, '$1-$2'],\n    [/(\\d+)([a-zA-Z])/g, '$1-$2'],\n  ] as const;\n\n  return transformations.reduce(\n    (result, [pattern, replacement]) => result.replace(pattern, replacement),\n    str\n  ).toLowerCase();\n};\n\nconst ICONS = Object.keys(LucideIcons)\n  .filter(name => name.endsWith('Icon'))\n  .map(toSnakeCase)\n  .filter(name => !name.includes('create-lucide') && name !== '');\n\nconst uniqueIcons = [...new Set(ICONS)];\n\nconst ICON_BUTTONS = uniqueIcons.map((icon) => ({\n  icon,\n  component: <DynamicIcon name={icon as IconName} className=\"w-6 h-6\" />\n}));\n\nexport function IconPicker({ \n  onSelect,\n  children,\n  searchable = true,\n  searchPlaceholder = \"Search for an icon...\"\n}: { \n  onSelect: (icon: IconName) => void,\n  children?: React.ReactNode,\n  searchable?: boolean,\n  searchPlaceholder?: string\n}) {\n  const [open, setOpen] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [displayCount, setDisplayCount] = useState(32);\n\n  const handleOpenChange = (newOpen: boolean) => {\n    setOpen(newOpen);\n    if (!newOpen) {\n      setDisplayCount(32);\n    }\n  };\n\n  const filteredIcons = useMemo(() => \n    search.trim() === \"\" \n      ? ICON_BUTTONS \n      : ICON_BUTTONS.filter(({ icon }) =>\n          icon.toLowerCase().includes(search.toLowerCase())\n        ),\n    [search]\n  );\n\n  const displayedIcons = useMemo(() => \n    filteredIcons.slice(0, displayCount),\n    [filteredIcons, displayCount]\n  );\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;\n    if (scrollHeight - scrollTop - clientHeight < 20) {\n      setDisplayCount(prev => Math.min(prev + 32, filteredIcons.length));\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={handleOpenChange}>\n      <PopoverTrigger asChild>\n        {children || (\n          <Button variant=\"outline\">\n            Select an icon\n          </Button>\n        )}\n      </PopoverTrigger>\n      <PopoverContent className=\"w-64 p-2\">\n        {searchable && (\n          <Input\n            placeholder={searchPlaceholder}\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n            className=\"mb-2\"\n          />\n        )}\n        <div \n          className=\"grid grid-cols-4 gap-2 max-h-60 overflow-auto\"\n          onScroll={handleScroll}\n        >\n          {displayedIcons.map(({ icon, component }) => (\n            <button\n              key={icon}\n              className={cn(\n                \"p-2 rounded-md border hover:bg-gray-100 dark:hover:bg-gray-800 transition\",\n                \"flex items-center justify-center\"\n              )}\n              onClick={() => {\n                onSelect(icon as IconName);\n                setDisplayCount(32);\n                setOpen(false);\n              }}\n            >\n              {component}\n            </button>\n          ))}\n          {filteredIcons.length === 0 && (\n            <div className=\"text-center text-gray-500 col-span-4\">\n              No icon found\n            </div>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}